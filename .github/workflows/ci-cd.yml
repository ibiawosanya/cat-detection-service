name: Cat Detector CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
        - destroy

env:
  AWS_REGION: eu-west-1
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit black isort safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Code formatting check (Black)
        run: black --check --diff src/ || true

      - name: Import sorting check (isort)
        run: isort --check-only --diff src/ || true

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Check dependencies for security vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json

  # Job 2: Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock moto boto3 requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Run infrastructure tests
        run: |
          pytest tests/test_infrastructure.py -v --cov=src --cov-report=xml --cov-report=html
        env:
          AWS_DEFAULT_REGION: eu-west-1
          AWS_REGION: eu-west-1
          ENVIRONMENT: test
          LAMBDA_MEMORY: 512
          LAMBDA_TIMEOUT: 30

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.9'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.9'
        with:
          name: coverage-reports-${{ github.run_number }}
          path: htmlcov/

  # Job 3: Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pulumi pulumi-aws
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: Select or create Pulumi stack
        run: |
          pulumi stack select dev || pulumi stack init dev
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi config set environment dev
          pulumi config set lambda-memory 512
          pulumi config set lambda-timeout 30

      - name: Pulumi Preview (Dry Run)
        run: pulumi preview --diff --non-interactive

      - name: Validate Pulumi Configuration
        run: |
          pulumi config --show-secrets
          echo "Stack configuration validated successfully"

  # Job 4: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.website_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pulumi pulumi-aws
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: Select Pulumi stack
        run: |
          pulumi stack select dev || pulumi stack init dev
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi config set environment dev
          pulumi config set lambda-memory 512
          pulumi config set lambda-timeout 30

      - name: Deploy infrastructure
        id: deploy
        run: |
          pulumi up --yes --non-interactive
          echo "api_url=$(pulumi stack output api_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "website_url=$(pulumi stack output website_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "web_bucket=$(pulumi stack output web_bucket 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(pulumi stack output distribution_id 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

      - name: Fix frontend configuration
        if: steps.deploy.outputs.api_url != ''
        run: |
          API_URL="${{ steps.deploy.outputs.api_url }}"
          WEB_BUCKET="${{ steps.deploy.outputs.web_bucket }}"
          DISTRIBUTION_ID="${{ steps.deploy.outputs.distribution_id }}"
          
          # Update frontend with API URL
          sed -i "s|const API_BASE_URL = '.*';|const API_BASE_URL = '${API_URL}';|g" src/web/index.html
          
          # Upload updated frontend
          if [ -n "$WEB_BUCKET" ]; then
            aws s3 sync src/web/ s3://$WEB_BUCKET/ --delete
            echo "‚úÖ Frontend uploaded with API URL: $API_URL"
          fi
          
          # Invalidate CloudFront cache
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
            echo "‚úÖ CloudFront cache invalidated"
          fi

      - name: Run integration tests
        if: steps.deploy.outputs.api_url != ''
        env:
          API_URL: ${{ steps.deploy.outputs.api_url }}
          WEBSITE_URL: ${{ steps.deploy.outputs.website_url }}
        run: |
          pip install pytest requests
          # Wait for CloudFront invalidation
          sleep 60
          pytest tests/test_integration.py -v --tb=short || true

      - name: Update deployment status
        run: |
          echo "‚úÖ Development deployment successful!"
          echo "üîó API URL: ${{ steps.deploy.outputs.api_url }}"
          echo "üåê Website URL: ${{ steps.deploy.outputs.website_url }}"

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.website_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pulumi pulumi-aws
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: Select Pulumi stack
        run: |
          pulumi stack select staging || pulumi stack init staging
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi config set environment staging
          pulumi config set lambda-memory 768
          pulumi config set lambda-timeout 45

      - name: Deploy infrastructure
        id: deploy
        run: |
          pulumi up --yes --non-interactive
          echo "api_url=$(pulumi stack output api_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "website_url=$(pulumi stack output website_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

      - name: Run comprehensive tests
        if: steps.deploy.outputs.api_url != ''
        env:
          API_URL: ${{ steps.deploy.outputs.api_url }}
          WEBSITE_URL: ${{ steps.deploy.outputs.website_url }}
        run: |
          pip install pytest requests
          pytest tests/ -v --tb=short -m "not slow" || true

  # Job 6: Cleanup (Manual Trigger)
  cleanup:
    name: Cleanup Development Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'destroy'
    environment: cleanup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: Destroy development stack
        run: |
          pulumi stack select dev
          pulumi destroy --yes --non-interactive
          
      - name: Remove Pulumi stack
        run: pulumi stack rm dev --yes