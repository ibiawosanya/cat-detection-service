name: Cat Detector CI/CD Pipeline - Multi-Environment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
        - destroy
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: eu-west-1
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit black isort safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Code formatting check (Black)
        run: black --check --diff src/

      - name: Import sorting check (isort)
        run: isort --check-only --diff src/

      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Check dependencies for security vulnerabilities
        run: safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json

  # Job 2: Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ !github.event.inputs.skip_tests }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock moto boto3 requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run infrastructure tests
        run: |
          pytest tests/test_infrastructure.py -v --cov=src --cov-report=xml --cov-report=html
        env:
          AWS_DEFAULT_REGION: eu-west-1
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.9'
        with:
          name: coverage-reports-${{ github.run_number }}
          path: htmlcov/

  # Job 3: Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.repository == 'ibiawosanya/cat-detector-ice-submission'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pulumi pulumi-aws
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: Validate Development Environment
        run: |
          pulumi stack select dev || pulumi stack init dev
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi config set environment dev
          pulumi config set lambda-memory 512
          pulumi config set lambda-timeout 30
          pulumi preview --diff --non-interactive

  # Job 4: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Infrastructure
        uses: ./.github/actions/deploy-infrastructure
        with:
          environment: dev
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          pulumi-access-token: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          pulumi-config-passphrase: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Run Smoke Tests
        run: |
          echo "üß™ Running smoke tests against dev environment..."
          python -m pytest tests/test_smoke.py --env=dev -v

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Infrastructure
        uses: ./.github/actions/deploy-infrastructure
        with:
          environment: staging
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          pulumi-access-token: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          pulumi-config-passphrase: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Run Integration Tests
        run: |
          echo "üß™ Running integration tests against staging..."
          python -m pytest tests/test_integration.py --env=staging -v

      - name: Performance Tests
        run: |
          echo "‚ö° Running performance tests..."
          python -m pytest tests/test_performance.py --env=staging -v

  # Job 6: Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-deployment Health Check
        run: |
          echo "üè• Checking production health before deployment..."
          # Add health check logic here

      - name: Deploy Infrastructure
        uses: ./.github/actions/deploy-infrastructure
        with:
          environment: prod
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          pulumi-access-token: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          pulumi-config-passphrase: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Post-deployment Health Check
        run: |
          echo "üè• Running post-deployment health checks..."
          python -m pytest tests/test_health.py --env=prod -v

      - name: Notify Deployment Success
        run: |
          echo "üéâ Production deployment successful!"
          # Add Slack/Teams notification here

  # Job 7: Destroy Infrastructure
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'destroy'
    environment: destruction
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pulumi Login
        run: pulumi login

      - name: List Available Stacks
        run: pulumi stack ls

      - name: Destroy Development
        run: |
          pulumi stack select dev && pulumi destroy --yes --skip-preview || echo "Dev stack not found"

      - name: Destroy Staging  
        run: |
          pulumi stack select staging && pulumi destroy --yes --skip-preview || echo "Staging stack not found"

      # Production destruction requires manual approval
      - name: Destroy Production (Manual Approval Required)
        run: |
          echo "üö® Production destruction requires manual verification"
          echo "Please manually run: pulumi stack select prod && pulumi destroy --yes"