name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          # Run unit tests (skip if files don't exist)
          if [ -f "tests/unit/test_lambda_functions.py" ]; then
            echo "Running unit tests..."
            pytest tests/unit/ -v
          else
            echo "No unit tests found, skipping..."
          fi

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false  # This is crucial!

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda packages
        run: |
          mkdir -p dist
          
          # Build upload lambda
          cd src/lambdas/upload
          pip install -r requirements.txt -t .
          zip -r ../../../dist/upload.zip .
          cd ../../..
          
          # Build process lambda
          cd src/lambdas/process
          pip install -r requirements.txt -t .
          zip -r ../../../dist/process.zip .
          cd ../../..
          
          # Build status lambda
          cd src/lambdas/status
          pip install -r requirements.txt -t .
          zip -r ../../../dist/status.zip .
          cd ../../..

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/dev
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          cd terraform/environments/dev
          
          # Capture outputs and set as step outputs
          API_URL=$(terraform output -raw api_gateway_url)
          WEB_BUCKET=$(terraform output -raw web_bucket_name)
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
          WEB_URL=$(terraform output -raw web_url)
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "web_bucket=$WEB_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "web_url=$WEB_URL" >> $GITHUB_OUTPUT
          
          echo "✅ API URL: $API_URL"
          echo "✅ Web Bucket: $WEB_BUCKET" 
          echo "✅ CloudFront ID: $CLOUDFRONT_ID"
          echo "✅ Web URL: $WEB_URL"

      - name: Deploy Web UI
        run: |
          echo "🚀 Starting web UI deployment..."
          
          # Use step outputs instead of command substitution
          API_URL="${{ steps.terraform_outputs.outputs.api_url }}"
          WEB_BUCKET="${{ steps.terraform_outputs.outputs.web_bucket }}"
          CLOUDFRONT_ID="${{ steps.terraform_outputs.outputs.cloudfront_id }}"
          WEB_URL="${{ steps.terraform_outputs.outputs.web_url }}"
          
          echo "📦 Installing dependencies..."
          cd src/web-ui
          npm install
          
          echo "🔨 Building React app with dynamic API URL..."
          REACT_APP_API_URL="$API_URL" npm run build
          
          echo "☁️ Deploying to S3 bucket: $WEB_BUCKET"
          aws s3 sync build/ "s3://$WEB_BUCKET" --delete
          
          echo "🌐 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_ID" --paths "/*"
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Web UI available at: $WEB_URL"
          echo "🔗 API available at: $API_URL"

      - name: Run Integration Tests
        run: |
          echo "🧪 Running integration tests..."
          
          # Install test dependencies
          pip install -r requirements.txt
          
          # Set API URL for integration tests
          export API_BASE_URL="${{ steps.terraform_outputs.outputs.api_url }}"
          
          # Run integration tests (skip if files don't exist)
          if [ -f "tests/integration/test_api.py" ]; then
            echo "Running integration tests against: $API_BASE_URL"
            pytest tests/integration/ -v --tb=short
          else
            echo "No integration tests found, skipping..."
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 DEPLOYMENT COMPLETE!"
          echo ""
          echo "🌐 Web UI: ${{ steps.terraform_outputs.outputs.web_url }}"
          echo "🔗 API: ${{ steps.terraform_outputs.outputs.api_url }}"
          echo ""
          echo "✅ Upload endpoint: ${{ steps.terraform_outputs.outputs.api_url }}/upload"
          echo "✅ Status endpoint: ${{ steps.terraform_outputs.outputs.api_url }}/status/{scan_id}"
          echo ""
          echo "🧪 All tests passed!"
          echo "🚀 Service is ready for use!"