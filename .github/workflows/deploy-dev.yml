name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest tests/unit/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda packages
        run: |
          mkdir -p dist
          
          # Build upload lambda
          cd src/lambdas/upload
          pip install -r requirements.txt -t .
          zip -r ../../../dist/upload.zip .
          cd ../../..
          
          # Build process lambda
          cd src/lambdas/process
          pip install -r requirements.txt -t .
          zip -r ../../../dist/process.zip .
          cd ../../..
          
          # Build status lambda
          cd src/lambdas/status
          pip install -r requirements.txt -t .
          zip -r ../../../dist/status.zip .
          cd ../../..

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/dev
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -auto-approve

      - name: Get API Gateway URL
        id: get_api_url
        run: |
          cd terraform/environments/dev
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Build and Deploy Web UI
        run: |
          cd src/web-ui
          npm install
          REACT_APP_API_URL=${{ steps.get_api_url.outputs.api_url }} npm run build
          
          # Deploy to S3
          aws s3 sync build/ s3://$(cd ../../terraform/environments/dev && terraform output -raw web_bucket_name) --delete
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation --distribution-id $(cd ../../terraform/environments/dev && terraform output -raw cloudfront_distribution_id) --paths "/*"

      - name: Run Integration Tests
        run: |
          export API_URL=${{ steps.get_api_url.outputs.api_url }}
          python -m pytest tests/integration/ -v