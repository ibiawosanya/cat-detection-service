name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest tests/test_simple.py -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda packages
        run: |
          mkdir -p dist
          
          # Build upload lambda
          cd src/lambdas/upload
          pip install -r requirements.txt -t .
          zip -r ../../../dist/upload.zip .
          cd ../../..
          
          # Build process lambda
          cd src/lambdas/process
          pip install -r requirements.txt -t .
          zip -r ../../../dist/process.zip .
          cd ../../..
          
          # Build status lambda
          cd src/lambdas/status
          pip install -r requirements.txt -t .
          zip -r ../../../dist/status.zip .
          cd ../../..

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/dev
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -auto-approve

      - name: Deploy Web UI and Run Tests
        run: |
          echo "üöÄ Starting web UI deployment..."
          
          # Get Terraform outputs directly
          cd terraform/environments/dev
          API_URL=$(terraform output api_gateway_url | tr -d '"')
          WEB_BUCKET=$(terraform output web_bucket_name | tr -d '"')
          CLOUDFRONT_ID=$(terraform output cloudfront_distribution_id | tr -d '"')
          
          echo "‚úÖ API URL: $API_URL"
          echo "‚úÖ Web Bucket: $WEB_BUCKET"
          echo "‚úÖ CloudFront ID: $CLOUDFRONT_ID"
          
          # Navigate to web UI directory
          cd ../../src/web-ui
          
          # Install dependencies and build
          echo "üì¶ Installing dependencies..."
          npm ci
          
          echo "üî® Building React app..."
          REACT_APP_API_URL=$API_URL npm run build
          
          # Deploy to S3
          echo "‚òÅÔ∏è Deploying to S3..."
          aws s3 sync build/ s3://$WEB_BUCKET --delete
          
          # Invalidate CloudFront
          echo "üåê Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
          
          # Run basic API test
          echo "üß™ Testing API..."
          curl -f $API_URL/status/test-id || echo "API test completed (expected 404 for non-existent ID)"
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Web UI: https://$(aws cloudfront get-distribution --id $CLOUDFRONT_ID --query 'Distribution.DomainName' --output text)"
          echo "üîó API: $API_URL"