name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest tests/test_simple.py -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda packages
        run: |
          mkdir -p dist
          
          # Build upload lambda
          cd src/lambdas/upload
          pip install -r requirements.txt -t .
          zip -r ../../../dist/upload.zip .
          cd ../../..
          
          # Build process lambda
          cd src/lambdas/process
          pip install -r requirements.txt -t .
          zip -r ../../../dist/process.zip .
          cd ../../..
          
          # Build status lambda
          cd src/lambdas/status
          pip install -r requirements.txt -t .
          zip -r ../../../dist/status.zip .
          cd ../../..

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/dev
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -auto-approve

      - name: Get API Gateway URL
        id: get_api_url
        run: |
          cd terraform/environments/dev
          echo "Getting Terraform outputs..."
          
          API_URL=$(terraform output -raw api_gateway_url)
          WEB_BUCKET=$(terraform output -raw web_bucket_name)
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
          
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "WEB_BUCKET=$WEB_BUCKET" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          
          echo "✅ API URL: $API_URL"
          echo "✅ Web Bucket: $WEB_BUCKET"
          echo "✅ CloudFront ID: $CLOUDFRONT_ID"

      - name: Build and Deploy Web UI
        run: |
          cd src/web-ui
          npm ci
          REACT_APP_API_URL=${{ steps.get_api_url.outputs.API_URL }} npm run build
          
          # Deploy to S3
          aws s3 sync build/ s3://${{ steps.get_api_url.outputs.WEB_BUCKET }} --delete
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get_api_url.outputs.CLOUDFRONT_ID }} \
            --paths "/*"
          
          echo "✅ Web UI deployed to S3 and CloudFront invalidated"

      - name: Run Integration Tests
        run: |
          export API_URL=${{ steps.get_api_url.outputs.API_URL }}
          # Only run integration tests if they exist and API_URL is set
          if [ -d "tests/integration" ] && [ ! -z "$API_URL" ]; then
            echo "Running integration tests against: $API_URL"
            # Wait for API to be ready
            sleep 30
            python -m pytest tests/integration/ -v --tb=short
          else
            echo "Skipping integration tests - no tests/integration directory or API_URL not set"
          fi