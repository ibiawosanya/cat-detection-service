name: Deploy to Staging

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: staging

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest tests/ --cov=src/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r src/lambdas/ -f json -o bandit-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: bandit-report.json

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/web-ui/package-lock.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda packages
        run: |
          mkdir -p dist
          
          # Function to build lambda package
          build_lambda() {
            local lambda_name=$1
            echo "Building $lambda_name lambda..."
            
            cd src/lambdas/$lambda_name
            
            # Install dependencies in current directory
            pip install -r requirements.txt -t .
            
            # Create zip package excluding unnecessary files
            zip -r ../../../dist/$lambda_name.zip . \
              -x "*.pyc" \
              -x "__pycache__/*" \
              -x "*.git*" \
              -x "tests/*" \
              -x "*.md"
            
            cd ../../..
          }
          
          # Build all lambda functions
          build_lambda "upload"
          build_lambda "process"
          build_lambda "status"

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform/environments/staging
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform/environments/staging
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/staging
          terraform plan -detailed-exitcode -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          cd terraform/environments/staging
          terraform apply tfplan

      - name: Get API Gateway URL
        id: get_api_url
        run: |
          cd terraform/environments/staging
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          WEB_BUCKET=$(terraform output -raw web_bucket_name)
          echo "web_bucket=$WEB_BUCKET" >> $GITHUB_OUTPUT
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

      - name: Build and Deploy Web UI
        run: |
          cd src/web-ui
          npm ci
          REACT_APP_API_URL=${{ steps.get_api_url.outputs.api_url }} npm run build
          
          # Deploy to S3
          aws s3 sync build/ s3://${{ steps.get_api_url.outputs.web_bucket }} --delete
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get_api_url.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Run Integration Tests
        run: |
          export API_URL=${{ steps.get_api_url.outputs.api_url }}
          python -m pytest tests/integration/ -v --tb=short

      - name: Performance Test
        run: |
          pip install locust
          export API_URL=${{ steps.get_api_url.outputs.api_url }}
          # Run light performance test for staging
          locust -f tests/performance/locustfile.py --host=$API_URL \
            --users 10 --spawn-rate 2 --run-time 60s --headless

      - name: Comment PR with Deployment Info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `
            ## ðŸš€ Staging Deployment Complete
            
            **Environment**: Staging
            **API URL**: ${{ steps.get_api_url.outputs.api_url }}
            **Web URL**: https://$(aws cloudfront get-distribution --id ${{ steps.get_api_url.outputs.cloudfront_id }} --query 'Distribution.DomainName' --output text)
            
            âœ… All tests passed
            âœ… Security scan completed
            âœ… Infrastructure deployed
            âœ… Integration tests passed
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });