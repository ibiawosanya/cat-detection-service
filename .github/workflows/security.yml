name: Security Scan

on:
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'src/**'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Safety (dependency vulnerability scan)
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report || true

      - name: Run Bandit (code security scan)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            safety-report.json
            bandit-report.json

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## Ì¥í Security Scan Results\n\n';
            
            try {
              let safetyIssues = 0;
              let banditIssues = 0;
              
              try {
                const safetyData = fs.readFileSync('safety-report.json', 'utf8');
                const safetyReport = JSON.parse(safetyData);
                safetyIssues = safetyReport.vulnerabilities?.length || 0;
              } catch (e) {
                console.log('Could not parse safety report');
              }
              
              try {
                const banditData = fs.readFileSync('bandit-report.json', 'utf8');
                const banditReport = JSON.parse(banditData);
                banditIssues = banditReport.results?.length || 0;
              } catch (e) {
                console.log('Could not parse bandit report');
              }
              
              comment += `**Safety (Dependencies):** ${safetyIssues} vulnerabilities found\n`;
              comment += `**Bandit (Code):** ${banditIssues} security issues found\n`;
              
              if (safetyIssues > 0 || banditIssues > 0) {
                comment += '\n‚ö†Ô∏è **Security issues detected!** Please review the security reports in the workflow artifacts.';
              } else {
                comment += '\n‚úÖ **No security issues detected.**';
              }
            } catch (error) {
              comment += '‚ùå **Could not parse security reports.** Please check the workflow logs.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
